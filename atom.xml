<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一介码农</title>
  
  <subtitle>专注、专精</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.wusirun.info/"/>
  <updated>2020-11-26T06:44:22.126Z</updated>
  <id>http://blog.wusirun.info/</id>
  
  <author>
    <name>Shadow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第一次群晖NAS使用和服务器搭建</title>
    <link href="http://blog.wusirun.info/2020/11/17/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%BE%A4%E6%99%96NAS%E4%BD%BF%E7%94%A8%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <id>http://blog.wusirun.info/2020/11/17/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%BE%A4%E6%99%96NAS%E4%BD%BF%E7%94%A8%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</id>
    <published>2020-11-17T05:45:28.000Z</published>
    <updated>2020-11-26T06:44:22.126Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么选择群晖？"><a href="#为什么选择群晖？" class="headerlink" title="为什么选择群晖？"></a>为什么选择群晖？</h3><p>也是一些机缘巧合之下，听到了群晖NAS这个产品。自己也是做了多年开发，而且云产品的服务器也将要到期。不如试试群晖来搭建自己需要的服务器？<br>回归正题为啥看上了群晖？</p><ol><li>作为多年的研发玩家，服务器还是比较必须的。而有自己的机器更加自由。</li><li>现在的群晖DSM系统已经比较完善（没有了解过黑群晖，比较懒不想折腾），带 + 的型号全部都支持docker，这让群晖不仅仅只是文件服务器、云盘、网站，可玩性特别高。</li><li>提供了quickconnection方便任何地方管理你的NAS，说白了还是看上了正版群晖的服务。当然黑群晖也是非常不错的。</li></ol><h3 id="购买"><a href="#购买" class="headerlink" title="购买"></a>购买</h3><p>自己的资金和日常需求也并不是要求很高，所以综合之下最后选了220+，算是比较亲民的在某东双11还能减免400+。所以其他渠道就没考虑了。</p><h3 id="硬盘和内存升级"><a href="#硬盘和内存升级" class="headerlink" title="硬盘和内存升级"></a>硬盘和内存升级</h3><p>硬盘不用多说，因为是组raid阵列，最好是双硬盘同样大小，系统基本上都能支持。<br>内存是参考了许久，因为官方给出的220+是最大内存只支持6g，感觉过于的小。但是论坛贴吧等都说内存不止，甚至有单加16g的大佬。<br>而且基本上某东上买三星的内存都能支持。所以我是加了三星8g内存，能够正常识别，也没有使用上的问题。感觉不错。</p><h3 id="内网服务器搭建，docker使用"><a href="#内网服务器搭建，docker使用" class="headerlink" title="内网服务器搭建，docker使用"></a>内网服务器搭建，docker使用</h3><p>既然是选择了群晖带 + 型号，当然更多的是看上了Docker方面。当我拿到手时也是毫不犹豫的选择安装了Docker套件，没有任何意外所有渠道的容器镜像是都能支持的，而且自带了Docker hub源等，特别方便。<br>至于容器的端口映射和如何访问，Docker命令特别多，资料丰富。就不详细说了。</p><h3 id="外网搭建条件，和一些内网穿透办法"><a href="#外网搭建条件，和一些内网穿透办法" class="headerlink" title="外网搭建条件，和一些内网穿透办法"></a>外网搭建条件，和一些内网穿透办法</h3><p>对于搭建服务器，更多的当然是希望能够任何地方都能够使用到。原本的群晖NAS就是能够达到这样的目的，但是也是有一定的条件的。</p><ol><li><p>最方便的就是拥有一个公网IP</p></li><li><p>内网穿透产品</p></li></ol><ol start="3"><li>公网服务器做端口反向代理<br>使用公网VPS+FRP内网穿透工具，实现群晖NAS服务器公网访问。<br>在拥有公网地址的VPS服务器上安装FRPS，修改好对应的frps.ini服务配置信息，开始后台静默启动。（这部分有一键服务端脚本<a href="https://www.ddayh.com/1433.html" target="_blank" rel="noopener">一键脚本</a>）<br>而frps配置和其原理使用参考<a href="https://gofrp.org/" target="_blank" rel="noopener">gofrp官网</a><br>里面既有frps配置的详细解释，还有frpc（frp client）配置方式。<br>剩下的就是在群晖NAS中开启frpc连通frps实现端口代理公网访问。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么选择群晖？&quot;&gt;&lt;a href=&quot;#为什么选择群晖？&quot; class=&quot;headerlink&quot; title=&quot;为什么选择群晖？&quot;&gt;&lt;/a&gt;为什么选择群晖？&lt;/h3&gt;&lt;p&gt;也是一些机缘巧合之下，听到了群晖NAS这个产品。自己也是做了多年开发，而且云产品的服务器也将
      
    
    </summary>
    
    
      <category term="硬件运维" scheme="http://blog.wusirun.info/categories/%E7%A1%AC%E4%BB%B6%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="群晖" scheme="http://blog.wusirun.info/tags/%E7%BE%A4%E6%99%96/"/>
    
  </entry>
  
  <entry>
    <title>记一次Java和.Net的Byte类型差异</title>
    <link href="http://blog.wusirun.info/2020/11/13/%E8%AE%B0%E4%B8%80%E6%AC%A1Java%E5%92%8C-Net%E7%9A%84Byte%E7%B1%BB%E5%9E%8B%E5%B7%AE%E5%BC%82/"/>
    <id>http://blog.wusirun.info/2020/11/13/%E8%AE%B0%E4%B8%80%E6%AC%A1Java%E5%92%8C-Net%E7%9A%84Byte%E7%B1%BB%E5%9E%8B%E5%B7%AE%E5%BC%82/</id>
    <published>2020-11-13T05:39:10.000Z</published>
    <updated>2020-11-13T06:17:01.706Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><blockquote><p>主要是在一次需要使用到XJWT一种特殊的jwt实现上遇到的问题。因为原库没有.net实现版本(<a href="https://github.com/softtouchit/xjwt" target="_blank" rel="noopener">GitHub上XJwt地址</a>)<br>所以自己实现了一份，在复刻这个库的时候发现Java和.Net中Byte基础类型又一个差别：<br>Java Byte类型 [-127~128]之间<br>.Net(c#) Byte类型 [0~255]之间<br>另外：Java在提供网络传输默认使用的是Big_Endian。<a href="https://baike.baidu.com/item/Endian" target="_blank" rel="noopener">Endian百度百科</a><br>.Net(c#)中默认是使用的Little_Endian，从而会导致SHA256加密，网络相互传输过程中数据不能互通。</p></blockquote><h4 id="c-如何与Java-Byte类型对应？"><a href="#c-如何与Java-Byte类型对应？" class="headerlink" title="c#如何与Java Byte类型对应？"></a>c#如何与Java Byte类型对应？</h4><blockquote><p>在C#中可以使用sByte类型去和Java的Byte类型对应</p></blockquote><h4 id="如何对应Java中的Base64-Decode和Base64-Encode编码？"><a href="#如何对应Java中的Base64-Decode和Base64-Encode编码？" class="headerlink" title="如何对应Java中的Base64.Decode和Base64.Encode编码？"></a>如何对应Java中的Base64.Decode和Base64.Encode编码？</h4><blockquote><p>Java Base64.Decode:<br>C#对应代码：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// Java Base64.getEncoder().encode(byte[])</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;_&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public static byte[] EncoderJavaBase64(this byte[] _)</span><br><span class="line">&#123;</span><br><span class="line">    return Encoding.UTF8.GetBytes(Convert.ToBase64String(_));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Java Base64.Encode:<br>C#对应代码：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// Java Base64.getDecoder().decode(byte[])</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;_&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public static byte[] DecoderJavaBase64(this byte[] _)</span><br><span class="line">&#123;</span><br><span class="line">    return Convert.FromBase64String(Encoding.UTF8.GetString(_));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="如何实现Java方法Long转Byte"><a href="#如何实现Java方法Long转Byte" class="headerlink" title="如何实现Java方法Long转Byte"></a>如何实现Java方法Long转Byte</h4><blockquote><p>C#代码：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// long转sbyte字节</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;_long&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public static sbyte[] ToJavaByteArray(this long _)</span><br><span class="line">&#123;</span><br><span class="line">    sbyte[] result = new sbyte[sizeof(long)];</span><br><span class="line">    for (int i = 0; i &lt; result.Length; i++)</span><br><span class="line">        result[i] = (sbyte)((_ &gt;&gt; (8 * i)) &amp; 0xFF);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-实现大小端-Big-Endian-Little-Endian-转换"><a href="#C-实现大小端-Big-Endian-Little-Endian-转换" class="headerlink" title="C#实现大小端(Big_Endian/Little_Endian)转换"></a>C#实现大小端(Big_Endian/Little_Endian)转换</h4><blockquote><p>C#代码：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 大端小端转换</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;_&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;order&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public static byte[] Order(this byte[] _, ByteOrder order)</span><br><span class="line">&#123;</span><br><span class="line">    //默认是否是小端，</span><br><span class="line">    if ((BitConverter.IsLittleEndian &amp;&amp; order == ByteOrder.BIG_ENDIAN) ||</span><br><span class="line">        (!BitConverter.IsLittleEndian &amp;&amp; order == ByteOrder.LITTLE_ENDIAN))</span><br><span class="line">        Array.Reverse(_);</span><br><span class="line">    return _;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-如何随机生成Long"><a href="#C-如何随机生成Long" class="headerlink" title="C#如何随机生成Long"></a>C#如何随机生成Long</h4><blockquote><p>C#代码：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 随机生成Long</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;_&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public static long NextLong(this Random _)</span><br><span class="line">&#123;</span><br><span class="line">    var key = _.NextDouble();</span><br><span class="line">    return (long)Math.Floor(key * 10000000D);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最后记录下自己完成的XJwt库"><a href="#最后记录下自己完成的XJwt库" class="headerlink" title="最后记录下自己完成的XJwt库"></a>最后记录下自己完成的XJwt库</h4><p><a href="https://github.com/weshadow/XJwt.Net" target="_blank" rel="noopener">源码地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;主要是在一次需要使用到XJWT一种特殊的jwt实现上遇到的问题。因为原库没有.net实现版本(&lt;a href=&quot;h
      
    
    </summary>
    
    
      <category term="编程" scheme="http://blog.wusirun.info/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term=".net笔记" scheme="http://blog.wusirun.info/tags/net%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>亿发软件项目思维导图</title>
    <link href="http://blog.wusirun.info/2020/11/05/%E4%BA%BF%E5%8F%91%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <id>http://blog.wusirun.info/2020/11/05/%E4%BA%BF%E5%8F%91%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</id>
    <published>2020-11-05T04:39:29.000Z</published>
    <updated>2020-11-05T08:36:46.835Z</updated>
    
    <content type="html"><![CDATA[<h3 id="亿发软件整理功能说明和思维导图"><a href="#亿发软件整理功能说明和思维导图" class="headerlink" title="亿发软件整理功能说明和思维导图"></a>亿发软件整理功能说明和思维导图</h3><img src="/images/亿发软件.png" class="xmind" title="亿发软件项目思维导图" alt="亿发软件项目思维导图"><hr><h3 id="亿发软件各个功能模块"><a href="#亿发软件各个功能模块" class="headerlink" title="亿发软件各个功能模块"></a>亿发软件各个功能模块</h3><blockquote><p>不明白的地方如下：</p><ol><li>帐套设置-》支付设置-〉C扫B码、B扫C码，还有不同的支付方式跟底下的设置有什么区别<br> 在银联和易生支付，同时这两方支持微信扫码支付和支付宝扫码支付（非原生微信支付和支付宝支付）</li><li>分销管理的流程<br> 多级分销，设置分销商，分销策略，佣金金额，同时接入到小程序中</li><li>小程序商品可见模版和不可见模版<br> 用于针对指定客户的小程序商品可见或不可见</li><li>待办提醒从哪来?<br> 有task任务，通过执行脚本和权限提供跳转链接</li><li>电子秤接口功能的作用<br> 用于pos端打条码秤重</li><li>销售单和销售订单的区别?<br> 销售订单相当于预销售，销售预购，不进行财务记账，不操作库存，销售单是实际销售单据</li><li>销售活动捆绑是什么意思?<br> 有满赠，满减规则，全局使用，而直降是设置优惠规则，走客户价格体系（根据客户价格体系）</li><li>产品装配、工厂产品装配-半成品是不能销售还是什么?<br> 相当于商品组装，用于生产，系统有生产模块</li><li>商品盘点是如何发起?<br> 盘点是随时发起，可以根据商品盘点，不锁定库存，直接盘盈盘亏</li><li>扣率代销是个什么意思?<br>软件使用方代第三方销售</li><li>什么是反红冲?<br>红冲是逆流程操作，反红冲是红冲的逆流程操作</li></ol></blockquote><hr><h4 id="另外其他版本中，还带有生产模块功能"><a href="#另外其他版本中，还带有生产模块功能" class="headerlink" title="另外其他版本中，还带有生产模块功能"></a>另外其他版本中，还带有生产模块功能</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;亿发软件整理功能说明和思维导图&quot;&gt;&lt;a href=&quot;#亿发软件整理功能说明和思维导图&quot; class=&quot;headerlink&quot; title=&quot;亿发软件整理功能说明和思维导图&quot;&gt;&lt;/a&gt;亿发软件整理功能说明和思维导图&lt;/h3&gt;&lt;img src=&quot;/images/亿发软
      
    
    </summary>
    
    
      <category term="工作" scheme="http://blog.wusirun.info/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="亿发软件" scheme="http://blog.wusirun.info/tags/%E4%BA%BF%E5%8F%91%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>开发计划</title>
    <link href="http://blog.wusirun.info/2020/11/03/%E5%BC%80%E5%8F%91%E8%AE%A1%E5%88%92/"/>
    <id>http://blog.wusirun.info/2020/11/03/%E5%BC%80%E5%8F%91%E8%AE%A1%E5%88%92/</id>
    <published>2020-11-03T02:17:51.000Z</published>
    <updated>2020-11-13T06:19:09.357Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2020-11-03"><a href="#2020-11-03" class="headerlink" title="2020.11.03"></a>2020.11.03</h3><ol><li>私活阿里云短信对接</li><li>.net core框架自定义权限<h3 id="2020-11-13"><a href="#2020-11-13" class="headerlink" title="2020.11.13"></a>2020.11.13</h3></li><li>.net core 3.1升级到 .net5</li><li>VUE+Element UI 的权限系统</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2020-11-03&quot;&gt;&lt;a href=&quot;#2020-11-03&quot; class=&quot;headerlink&quot; title=&quot;2020.11.03&quot;&gt;&lt;/a&gt;2020.11.03&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;私活阿里云短信对接&lt;/li&gt;
&lt;li&gt;.net core框架自定
      
    
    </summary>
    
    
      <category term="编程" scheme="http://blog.wusirun.info/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="计划" scheme="http://blog.wusirun.info/tags/%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>NewtonJson.net空字符串处理</title>
    <link href="http://blog.wusirun.info/2020/10/29/NewtonJson-net%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    <id>http://blog.wusirun.info/2020/10/29/NewtonJson-net%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</id>
    <published>2020-10-29T09:07:11.000Z</published>
    <updated>2020-11-05T08:55:22.438Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NewtonJson-net在序列化对象过程中，出现空字符串默认转换成null，而无法转换成-“”"><a href="#NewtonJson-net在序列化对象过程中，出现空字符串默认转换成null，而无法转换成-“”" class="headerlink" title="NewtonJson.net在序列化对象过程中，出现空字符串默认转换成null，而无法转换成(“”)"></a>NewtonJson.net在序列化对象过程中，出现空字符串默认转换成null，而无法转换成(“”)</h3><hr><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><blockquote><p>首先自定义空字符串转换类，继承DefaultContractResolver，重写实现方法；</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class NullToEmptyStringResolver : Newtonsoft.Json.Serialization.DefaultContractResolver</span><br><span class="line">&#123;</span><br><span class="line">    protected override IList&lt;JsonProperty&gt; CreateProperties(Type type, MemberSerialization memberSerialization)</span><br><span class="line">    &#123;</span><br><span class="line">        return type.GetProperties()</span><br><span class="line">                .Select(p=&gt;&#123;</span><br><span class="line">                    var jp = base.CreateProperty(p, memberSerialization);</span><br><span class="line">                    jp.ValueProvider = new NullToEmptyStringValueProvider(p);</span><br><span class="line">                    return jp;</span><br><span class="line">                &#125;).ToList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class NullToEmptyStringValueProvider : IValueProvider</span><br><span class="line">&#123;</span><br><span class="line">    PropertyInfo _MemberInfo;</span><br><span class="line">    public NullToEmptyStringValueProvider(PropertyInfo memberInfo)</span><br><span class="line">    &#123;</span><br><span class="line">        _MemberInfo = memberInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public object GetValue(object target)</span><br><span class="line">    &#123;</span><br><span class="line">        object result =  _MemberInfo.GetValue(target);</span><br><span class="line">        if (_MemberInfo.PropertyType == typeof(string) &amp;&amp; result == null) result = &quot;&quot;;</span><br><span class="line">        return result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void SetValue(object target, object value)</span><br><span class="line">    &#123;</span><br><span class="line">        _MemberInfo.SetValue(target, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实际使用时：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var settings = new JsonSerializerSettings() &#123; ContractResolver= new NullToEmptyStringResolver() &#125;;</span><br><span class="line">var str = JsonConvert.SerializeObject(yourObj, settings);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;NewtonJson-net在序列化对象过程中，出现空字符串默认转换成null，而无法转换成-“”&quot;&gt;&lt;a href=&quot;#NewtonJson-net在序列化对象过程中，出现空字符串默认转换成null，而无法转换成-“”&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="编程" scheme="http://blog.wusirun.info/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term=".net笔记" scheme="http://blog.wusirun.info/tags/net%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_1471</title>
    <link href="http://blog.wusirun.info/2020/06/20/leetcode-1471/"/>
    <id>http://blog.wusirun.info/2020/06/20/leetcode-1471/</id>
    <published>2020-06-20T14:39:26.000Z</published>
    <updated>2020-11-05T08:41:48.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>给你一个整数数组 arr 和一个整数 k 。<br>设 m 为数组的中位数，只要满足下述两个前提之一，就可以判定 arr[i] 的值比 arr[j] 的值更强：<br> |arr[i] - m| &gt; |arr[j] - m|<br> |arr[i] - m| == |arr[j] - m|，且 arr[i] &gt; arr[j]<br>请返回由数组中最强的 k 个值组成的列表。答案可以以 任意顺序 返回。<br>中位数 是一个有序整数列表中处于中间位置的值。形式上，如果列表的长度为 n ，那么中位数就是该有序列表（下标从 0 开始）中位于 ((n - 1) / 2) 的元素。<br>例如 arr = [6, -3, 7, 2, 11]，n = 5：数组排序后得到 arr = [-3, 2, 6, 7, 11] ，数组的中间位置为 m = ((5 - 1) / 2) = 2 ，中位数 arr[m] 的值为 6 。<br>例如 arr = [-7, 22, 17, 3]，n = 4：数组排序后得到 arr = [-7, 3, 17, 22] ，数组的中间位置为 m = ((4 - 1) / 2) = 1 ，中位数 arr[m] 的值为 3 。</p></blockquote><hr><blockquote><p>示例 1：<br>输入：arr = [1,2,3,4,5], k = 2<br>输出：[5,1]<br>解释：中位数为 3，按从强到弱顺序排序后，数组变为 [5,1,4,2,3]。最强的两个元素是 [5, 1]。[1, 5] 也是正确答案。<br>注意，尽管 |5 - 3| == |1 - 3| ，但是 5 比 1 更强，因为 5 &gt; 1 。</p></blockquote><blockquote><p>示例 2：<br>输入：arr = [1,1,3,5,5], k = 2<br>输出：[5,5]<br>解释：中位数为 3, 按从强到弱顺序排序后，数组变为 [5,5,1,1,3]。最强的两个元素是 [5, 5]。</p></blockquote><blockquote><p>示例 3：<br>输入：arr = [6,7,11,7,6,8], k = 5<br>输出：[11,8,6,6,7]<br>解释：中位数为 7, 按从强到弱顺序排序后，数组变为 [11,8,6,6,7,7]。<br>[11,8,6,6,7] 的任何排列都是正确答案。</p></blockquote><blockquote><p>示例 4：<br>输入：arr = [6,-3,7,2,11], k = 3<br>输出：[-3,11,2]</p></blockquote><blockquote><p>示例 5：<br>输入：arr = [-7,22,17,3], k = 2<br>输出：[22,17]</p></blockquote><hr><blockquote><blockquote><p>提示：<br>1 &lt;= arr.length &lt;= 10^5<br>-10^5 &lt;= arr[i] &lt;= 10^5<br>1 &lt;= k &lt;= arr.length</p></blockquote></blockquote><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/the-k-strongest-values-in-an-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/the-k-strongest-values-in-an-array</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><hr><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="常规思路"><a href="#常规思路" class="headerlink" title="常规思路"></a>常规思路</h4><blockquote><ol><li>先算出当前数组中位数 arr[(arr.length-1)/2]=?</li><li>再循环比较，形成新的数组，然后取前k个值</li></ol></blockquote><h4 id="其他思路"><a href="#其他思路" class="headerlink" title="其他思路"></a>其他思路</h4><blockquote><ol><li>发现每一位减去中位数中，越靠近中位数的绝对值越小（也就是题目的越弱），越靠近两端的值越大（也就是越强），是否可以将数组拆分成小于中位数数组和大于中位数数组，然后进行绝对值计算形成一个数组，可以减少比较次数？</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个整数数组 arr 和一个整数 k 。&lt;br&gt;设 m 为数组的中位数，只要满足下述两个前提之一，就可以判定 
      
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.wusirun.info/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="LeetCode" scheme="http://blog.wusirun.info/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_255_队列实现栈</title>
    <link href="http://blog.wusirun.info/2020/06/20/leetcode-255-%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
    <id>http://blog.wusirun.info/2020/06/20/leetcode-255-%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/</id>
    <published>2020-06-20T14:15:22.000Z</published>
    <updated>2020-11-05T08:48:11.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-255题"><a href="#LeetCode-255题" class="headerlink" title="LeetCode.255题"></a>LeetCode.255题</h3><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="用队列实现栈"><a href="#用队列实现栈" class="headerlink" title="用队列实现栈"></a>用队列实现栈</h4><hr><blockquote><ol><li>思考队列先进先出，栈先进后出</li><li>就肯定需要用多个队列模拟</li><li>两种实现方式：<blockquote><ol><li>实现方式一 push时操作差不多，在pop时增加逻辑。从队1中持续push元素，如果pop时，将队1元素push到队2，直到队1最后一个元素，将队1模拟出栈，然后将队1队2交换或者复制。</li><li>实现方式二 从入栈开始增加逻辑。从队1中push元素，队2出栈元素，如果队2中没有元素将队1刚push的元素加入。如果有元素，将队2的元素依次出队加入到队1中，队1队2交换或者复制。出栈模拟时从队2出队。</li></ol></blockquote></li><li>扩展思考？ 用栈模拟队列操作</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;LeetCode-255题&quot;&gt;&lt;a href=&quot;#LeetCode-255题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode.255题&quot;&gt;&lt;/a&gt;LeetCode.255题&lt;/h3&gt;&lt;h3 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot;
      
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.wusirun.info/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="LeetCode" scheme="http://blog.wusirun.info/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>2020工作学习计划</title>
    <link href="http://blog.wusirun.info/2020/05/25/2020%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    <id>http://blog.wusirun.info/2020/05/25/2020%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</id>
    <published>2020-05-25T09:03:19.000Z</published>
    <updated>2020-10-30T03:55:55.367Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Java虚拟机，Jvm基础和调优等等</li><li>Dubbo和Spring Cloud微服务框架</li><li>微服务框架下，分布式锁和分布式事务</li><li>对应使用的中间件，RPC，数据库中间件，消息中间件</li><li>分布式事务2PC、3PC、TCC、最终一致性解决方案原理</li><li>Redis和Zookeeper</li><li>Elasticsreach+logstash+kibana</li><li>数据结构算法、设计模式</li><li>spring底层了解</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Java虚拟机，Jvm基础和调优等等&lt;/li&gt;
&lt;li&gt;Dubbo和Spring Cloud微服务框架&lt;/li&gt;
&lt;li&gt;微服务框架下，分布式锁和分布式事务&lt;/li&gt;
&lt;li&gt;对应使用的中间件，RPC，数据库中间件，消息中间件&lt;/li&gt;
&lt;li&gt;分布式事务2PC
      
    
    </summary>
    
    
      <category term="心路历程" scheme="http://blog.wusirun.info/categories/%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/"/>
    
    
      <category term="学习" scheme="http://blog.wusirun.info/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>2020面试准备</title>
    <link href="http://blog.wusirun.info/2020/05/05/2020%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    <id>http://blog.wusirun.info/2020/05/05/2020%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</id>
    <published>2020-05-05T11:51:18.000Z</published>
    <updated>2020-10-30T03:56:03.556Z</updated>
    
    <content type="html"><![CDATA[<p>01、透彻理解Tomcat原理手写动静态资源的实现<br>02、分享能源领域的分布式监测系统架构<br>03、分布式系统关键技术Rpc框架详解与实现<br>04、自己写一个SpringMVC框架<br>05、使用Jsoup实现网页爬虫功能<br>06、JAVA高级进阶之NIO通信架构原理详解<br>07、高手必过之路透彻理解Spring容器IOC的原理分析<br>08、并发编程之深入业务隔离场景原理详解<br>09、深入浅出Java虚拟机<br>10、源码分析之手写MyBatis<br>11、大型分布式服务治理技术-Dubbo企业级实战<br>12、大流量高并发之限流特技<br>13、深入分析热部署机制的原理实现<br>14、高性能反向代理服务器Nginx-动静分离实战<br>15、架构师必备技能之Spring MVC框架原理解析<br>下面为系统的学习方向<br>01、maven的使用<br>maven的使用入门<br>maven私服的搭建及部署<br>maven坐标分析/父控设置<br>02、git版本管理及jenkins自动化构建<br>git使用入门培训<br>git常用命令分析和使用<br>jenkins环境搭建及插件配置<br>git+jenkins实现自动化构建<br>03、NoSql专题-redis高性能缓存<br>redis使用入门<br>redis常用命令及客户端的使用<br>redis高可用集群搭建<br>04、NoSql专题-mongodb<br>mongodb使用入门<br>mongodb高可用集群搭建<br>mongodb常用命令及客户端的使用<br>05、分布式专题-zookeeper+dubbo服务协调<br>zookeeper安装部署及命令分析<br>zookeeper客户端的使用<br>zookeeper实现原理分析<br>dubbo的使用入门及配置分析<br>zookeeper+dubbo实现服务注册和发现<br>06、分布式专题-消息中间件<br>activeMq-jms规范及使用<br>activeMq消息分发机制分析<br>kafka实现原理剖析<br>kafka的数据传输事务性及实践练习<br>07、分布式缓存分析对比<br>memcache的原理分析及使用<br>memcache和redis的横向对比分析<br>分布式接口技术<br>webservice/RMI/restful的使用<br>09、高并发专题-数据库层面优化<br>分库分表的原理及规则讲解<br>数据库主备及高可用<br>10、性能调优专题-jvm调优<br>JVM原理剖析<br>jvm内存模型及垃圾回收器的分析<br>11、性能调优专题-容器性能优化<br>nginx性能优化<br>tomcat性能优化<br>12、性能调优专题-数据库优化<br>mysql常见优化手段分析及实践<br>13、高性能容器的使用<br>nginx使用入门<br>nginx负载均衡/反向代理实现<br>14、双十一专题-九阳真经<br>太极聚气之分布式压测平台<br>氤氲紫气之分布式缓存体系<br>盘龙真诀之分布式消息系统<br>金刚之躯之分布式跟踪系统<br>外功辅助之分布式配置系统<br>15、微服务架构技术栈分析<br>springboot的使用<br>16、分布式协调服务zookeeper<br>zookeeper集群及相关概念分析<br>zookeeper java api的使用及实践<br>17、从集中式到分布式架构<br>分布式架构的演进过程<br>分布式架构的基石-TCP/UDP<br>18、分布式通信协议<br>分布式通信协议-HTTP及RESTful<br>分布式通信协议-webservice详解<br>分布式通信协议-RMI<br>分布式通信协议-序列化技术<br>19、分布式服务治理<br>dubbo控制台及监控中心的安装部署<br>dubbo常用配置分析<br>dubbo实战演练<br>20、NIO技术之-Netty<br>NIO基本概念及BIO、AIO的对比分析<br>NIO核心设计思想剖析（Buffer/Channel..）<br>Netty产生的背景及优缺点分析<br>Netty实现IM聊天系统<br>21、分布式缓存技术-Redis<br>redis的安装及数据类型分析<br>Redis客户端的使用<br>Redis高可用方案实战<br>Redis+Lua脚本实现原子操作<br>22、高性能之道-MongoDB<br>MongoDB高可用部署<br>MongoDB动态查询及索引剖析<br>MongoDB集成spring应用<br>23、数据库高性能之道-Mysql<br>分库分表深入分析<br>Mysql主从模型配置/Mycat的使用<br>大家可以点击加入群：650385180<br>24、分布式通信技术<br>JMS基本概念和模型<br>ActiveMQ结合Spring开发<br>ActiveMQ静态网络和**络链接<br>Kafka的高可用方案及原理分析<br>25、SOA架构及微服务架构<br>什么是SOA架构/为什么需要SOA<br>领域驱动设计方法/典型SOA架构设计<br>spring boot深入剖析<br>spring boot+dubbo企业实战<br>26、Docker虚拟化技术<br>Docker虚拟化技术(镜像/仓库/容器)<br>Docker整合spring boot<br>Docker 服务编排<br>27、导流技术<br>Nginx反向代理、负载均衡<br>Nginx进程模型分析<br>Nginx+keepalived高可用方案<br>28、微服务技术<br>spring boot（mvc）<br>spring boot（REST）<br>spring boot(验证）<br>29、spring cloud<br>spring cloud config client<br>spring cloud config server<br>spring cloud netflix eureka<br>spring cloud netflix ribbon<br>spring cloud hystrix<br>spring cloud feign<br>spring cloud stream<br>spring cloud bus<br>spring cloud sleuth<br>30、分布式消息技术-kafka<br>kafka高可用集群及介绍<br>kafka底层实现原理分析<br>31、分布式缓存-redis<br>redis的数据类型分析<br>redis高可用集群方案<br>lua脚本在redis中的应用<br>32、高性能之道-MongoDB<br>MongoDB的基本原理<br>MongoDB常用命令及客户端使用<br>手写基于MongoDB的ORM框架<br>MongoDB高可用解决方案<br>33、数据库高性能-Mysql<br>分库分表深入分析及主从模型<br>数据库中间件Mycat介绍<br>34、性能优化专题<br>从测试的角度解读如何衡量性能<br>了解Linux系统<br>35、虚拟机-JVM<br>内存模型、运行时数据<br>垃圾回收、GC日志<br>调优实战<br>36、容器优化-Tomcat<br>tomcat架构分析<br>线程模型分析<br>tomcat调优实战<br>37、mysql数据库调优<br>Mysql底层存储分析</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;01、透彻理解Tomcat原理手写动静态资源的实现&lt;br&gt;02、分享能源领域的分布式监测系统架构&lt;br&gt;03、分布式系统关键技术Rpc框架详解与实现&lt;br&gt;04、自己写一个SpringMVC框架&lt;br&gt;05、使用Jsoup实现网页爬虫功能&lt;br&gt;06、JAVA高级进阶之NI
      
    
    </summary>
    
    
      <category term="心路历程" scheme="http://blog.wusirun.info/categories/%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/"/>
    
    
      <category term="面试" scheme="http://blog.wusirun.info/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2020年读书笔记</title>
    <link href="http://blog.wusirun.info/2020/02/05/2020%E5%B9%B4%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.wusirun.info/2020/02/05/2020%E5%B9%B4%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-02-05T02:17:27.000Z</published>
    <updated>2020-11-02T09:21:40.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2020年-读书笔记"><a href="#2020年-读书笔记" class="headerlink" title="2020年 读书笔记"></a>2020年 读书笔记</h2><h4 id="《漫画算法》-2020-05-10"><a href="#《漫画算法》-2020-05-10" class="headerlink" title="《漫画算法》 2020-05-10"></a>《漫画算法》 2020-05-10</h4><blockquote><ol><li>时间复杂度与空间复杂度分析</li><li>逻辑结构和物理结构</li><li>基本逻辑结构：数组、链表、栈、队列、哈希表（散列表）、树、二叉树（二叉排序树、二叉平衡树、多叉树、B树、B+树、B*树）、图</li><li>基础算法<ol><li>排序算法：</li><li>查找算法：</li><li>其他有意思的算法：</li></ol></li><li></li></ol></blockquote><h4 id="《高可用可伸缩为服务架构》"><a href="#《高可用可伸缩为服务架构》" class="headerlink" title="《高可用可伸缩为服务架构》"></a>《高可用可伸缩为服务架构》</h4><blockquote><ol><li>什么是微服务架构？</li><li>微服务架构体系的优缺点：</li><li>什么是驱动领域设计？</li><li>如何去做驱动领域设计？</li><li>Dubbo框架</li><li>Spring Cloud 框架体系</li></ol></blockquote><h4 id="《深入理解Java虚拟机》"><a href="#《深入理解Java虚拟机》" class="headerlink" title="《深入理解Java虚拟机》"></a>《深入理解Java虚拟机》</h4><ol><li>GC垃圾回收机制和过程</li></ol><h4 id="《剑指offer》"><a href="#《剑指offer》" class="headerlink" title="《剑指offer》"></a>《剑指offer》</h4><h4 id="《离散数学及应用》"><a href="#《离散数学及应用》" class="headerlink" title="《离散数学及应用》"></a>《离散数学及应用》</h4><h4 id="《逆商》"><a href="#《逆商》" class="headerlink" title="《逆商》"></a>《逆商》</h4><h4 id="《消息中间件》"><a href="#《消息中间件》" class="headerlink" title="《消息中间件》"></a>《消息中间件》</h4><h4 id="《人间失格》"><a href="#《人间失格》" class="headerlink" title="《人间失格》"></a>《人间失格》</h4><hr><h4 id="《-net-core-Rustful》"><a href="#《-net-core-Rustful》" class="headerlink" title="《.net core Rustful》"></a>《.net core Rustful》</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2020年-读书笔记&quot;&gt;&lt;a href=&quot;#2020年-读书笔记&quot; class=&quot;headerlink&quot; title=&quot;2020年 读书笔记&quot;&gt;&lt;/a&gt;2020年 读书笔记&lt;/h2&gt;&lt;h4 id=&quot;《漫画算法》-2020-05-10&quot;&gt;&lt;a href=&quot;#《漫画算
      
    
    </summary>
    
    
      <category term="阅读" scheme="http://blog.wusirun.info/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://blog.wusirun.info/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2019年读书笔记</title>
    <link href="http://blog.wusirun.info/2019/09/20/2019%E5%B9%B4%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.wusirun.info/2019/09/20/2019%E5%B9%B4%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2019-09-20T05:54:20.000Z</published>
    <updated>2020-11-02T09:23:58.008Z</updated>
    
    <content type="html"><![CDATA[<h4 id="《未来简史》"><a href="#《未来简史》" class="headerlink" title="《未来简史》"></a>《未来简史》</h4><h4 id="《断舍离》-nbsp-nbsp-2019更早"><a href="#《断舍离》-nbsp-nbsp-2019更早" class="headerlink" title="《断舍离》&nbsp;&nbsp;2019更早"></a>《断舍离》&nbsp;&nbsp;2019更早</h4><h4 id="《人类简史》-nbsp-nbsp-2019-09-23"><a href="#《人类简史》-nbsp-nbsp-2019-09-23" class="headerlink" title="《人类简史》&nbsp;&nbsp;2019-09-23"></a>《人类简史》&nbsp;&nbsp;2019-09-23</h4><h4 id="《未来简史》-1"><a href="#《未来简史》-1" class="headerlink" title="《未来简史》"></a>《未来简史》</h4><h4 id="《大话数据结构》"><a href="#《大话数据结构》" class="headerlink" title="《大话数据结构》"></a>《大话数据结构》</h4><h4 id="《可复制的领导力》"><a href="#《可复制的领导力》" class="headerlink" title="《可复制的领导力》"></a>《可复制的领导力》</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;《未来简史》&quot;&gt;&lt;a href=&quot;#《未来简史》&quot; class=&quot;headerlink&quot; title=&quot;《未来简史》&quot;&gt;&lt;/a&gt;《未来简史》&lt;/h4&gt;&lt;h4 id=&quot;《断舍离》-nbsp-nbsp-2019更早&quot;&gt;&lt;a href=&quot;#《断舍离》-nbsp-nbsp
      
    
    </summary>
    
    
      <category term="阅读" scheme="http://blog.wusirun.info/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://blog.wusirun.info/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>开篇-我的个人博客开张了!</title>
    <link href="http://blog.wusirun.info/2019/09/18/%E5%BC%80%E7%AF%87/"/>
    <id>http://blog.wusirun.info/2019/09/18/%E5%BC%80%E7%AF%87/</id>
    <published>2019-09-18T08:30:11.000Z</published>
    <updated>2020-01-10T09:26:21.188Z</updated>
    
    <content type="html"><![CDATA[<h3 id="想写点东西"><a href="#想写点东西" class="headerlink" title="想写点东西"></a>想写点东西</h3><p>&nbsp;&nbsp;从参加工作,到后来加入博客园这么多年的时间其实一直就想将自己经历和所学慢慢整理记录下来.做成自己的博客查阅,但是一直也没能有动力去实现它.<br>&nbsp;&nbsp;到现在来说博客已经见怪不怪了,方便快捷,而且也越来越多元化.身为一个从业这么多年的码农,此时更想把自己所学慢慢整理记录起来.<br>这也就是说~我的博客开张啦~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;想写点东西&quot;&gt;&lt;a href=&quot;#想写点东西&quot; class=&quot;headerlink&quot; title=&quot;想写点东西&quot;&gt;&lt;/a&gt;想写点东西&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;从参加工作,到后来加入博客园这么多年的时间其实一直就想将自己经历和所学慢慢整理记录下来.做成
      
    
    </summary>
    
    
      <category term="心路历程" scheme="http://blog.wusirun.info/categories/%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/"/>
    
    
      <category term="其他" scheme="http://blog.wusirun.info/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
