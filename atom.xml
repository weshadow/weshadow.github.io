<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shadow的个人博客</title>
  
  <subtitle>专注、专精</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.wusirun.info/"/>
  <updated>2020-10-30T03:56:42.632Z</updated>
  <id>http://blog.wusirun.info/</id>
  
  <author>
    <name>Shadow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NewtonJson.net空字符串处理</title>
    <link href="http://blog.wusirun.info/2020/10/29/NewtonJson-net%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    <id>http://blog.wusirun.info/2020/10/29/NewtonJson-net%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</id>
    <published>2020-10-29T09:07:11.000Z</published>
    <updated>2020-10-30T03:56:42.632Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NewtonJson-net在序列化对象过程中，出现空字符串默认转换成null，而无法转换成-“”"><a href="#NewtonJson-net在序列化对象过程中，出现空字符串默认转换成null，而无法转换成-“”" class="headerlink" title="NewtonJson.net在序列化对象过程中，出现空字符串默认转换成null，而无法转换成(“”)"></a>NewtonJson.net在序列化对象过程中，出现空字符串默认转换成null，而无法转换成(“”)</h3><hr><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><blockquote><p>首先自定义空字符串转换类，继承DefaultContractResolver，重写实现方法；</p></blockquote><pre><code>public class NullToEmptyStringResolver : Newtonsoft.Json.Serialization.DefaultContractResolver{    protected override IList&lt;JsonProperty&gt; CreateProperties(Type type, MemberSerialization memberSerialization)    {        return type.GetProperties()                .Select(p=&gt;{                    var jp = base.CreateProperty(p, memberSerialization);                    jp.ValueProvider = new NullToEmptyStringValueProvider(p);                    return jp;                }).ToList();    }}public class NullToEmptyStringValueProvider : IValueProvider{    PropertyInfo _MemberInfo;    public NullToEmptyStringValueProvider(PropertyInfo memberInfo)    {        _MemberInfo = memberInfo;    }    public object GetValue(object target)    {        object result =  _MemberInfo.GetValue(target);        if (_MemberInfo.PropertyType == typeof(string) &amp;&amp; result == null) result = &quot;&quot;;        return result;    }    public void SetValue(object target, object value)    {        _MemberInfo.SetValue(target, value);    }}</code></pre><blockquote><p>实际使用时：</p></blockquote><pre><code>var settings = new JsonSerializerSettings() { ContractResolver= new NullToEmptyStringResolver() };var str = JsonConvert.SerializeObject(yourObj, settings);</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;NewtonJson-net在序列化对象过程中，出现空字符串默认转换成null，而无法转换成-“”&quot;&gt;&lt;a href=&quot;#NewtonJson-net在序列化对象过程中，出现空字符串默认转换成null，而无法转换成-“”&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="编程" scheme="http://blog.wusirun.info/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="代码笔记" scheme="http://blog.wusirun.info/tags/%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_1471</title>
    <link href="http://blog.wusirun.info/2020/06/20/leetcode-1471/"/>
    <id>http://blog.wusirun.info/2020/06/20/leetcode-1471/</id>
    <published>2020-06-20T14:39:26.000Z</published>
    <updated>2020-06-21T12:09:52.206Z</updated>
    
    <content type="html"><![CDATA[<p>给你一个整数数组 arr 和一个整数 k 。</p><p>设 m 为数组的中位数，只要满足下述两个前提之一，就可以判定 arr[i] 的值比 arr[j] 的值更强：</p><p> |arr[i] - m| &gt; |arr[j] - m|<br> |arr[i] - m| == |arr[j] - m|，且 arr[i] &gt; arr[j]<br>请返回由数组中最强的 k 个值组成的列表。答案可以以 任意顺序 返回。</p><p>中位数 是一个有序整数列表中处于中间位置的值。形式上，如果列表的长度为 n ，那么中位数就是该有序列表（下标从 0 开始）中位于 ((n - 1) / 2) 的元素。</p><p>例如 arr = [6, -3, 7, 2, 11]，n = 5：数组排序后得到 arr = [-3, 2, 6, 7, 11] ，数组的中间位置为 m = ((5 - 1) / 2) = 2 ，中位数 arr[m] 的值为 6 。<br>例如 arr = [-7, 22, 17, 3]，n = 4：数组排序后得到 arr = [-7, 3, 17, 22] ，数组的中间位置为 m = ((4 - 1) / 2) = 1 ，中位数 arr[m] 的值为 3 。</p><p>示例 1：</p><p>输入：arr = [1,2,3,4,5], k = 2<br>输出：[5,1]<br>解释：中位数为 3，按从强到弱顺序排序后，数组变为 [5,1,4,2,3]。最强的两个元素是 [5, 1]。[1, 5] 也是正确答案。<br>注意，尽管 |5 - 3| == |1 - 3| ，但是 5 比 1 更强，因为 5 &gt; 1 。<br>示例 2：</p><p>输入：arr = [1,1,3,5,5], k = 2<br>输出：[5,5]<br>解释：中位数为 3, 按从强到弱顺序排序后，数组变为 [5,5,1,1,3]。最强的两个元素是 [5, 5]。<br>示例 3：</p><p>输入：arr = [6,7,11,7,6,8], k = 5<br>输出：[11,8,6,6,7]<br>解释：中位数为 7, 按从强到弱顺序排序后，数组变为 [11,8,6,6,7,7]。<br>[11,8,6,6,7] 的任何排列都是正确答案。<br>示例 4：</p><p>输入：arr = [6,-3,7,2,11], k = 3<br>输出：[-3,11,2]<br>示例 5：</p><p>输入：arr = [-7,22,17,3], k = 2<br>输出：[22,17]</p><p>提示：</p><p>1 &lt;= arr.length &lt;= 10^5<br>-10^5 &lt;= arr[i] &lt;= 10^5<br>1 &lt;= k &lt;= arr.length</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/the-k-strongest-values-in-an-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/the-k-strongest-values-in-an-array</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><hr><p>常规思路</p><ol><li>先算出当前数组中位数 arr[(arr.length-1)/2]=?</li><li>再循环比较，形成新的数组，然后取前k个值</li></ol><p>其他思路</p><ol><li>发现每一位减去中位数中，越靠近中位数的绝对值越小（也就是题目的越弱），越靠近两端的值越大（也就是越强），是否可以将数组拆分成小于中位数数组和大于中位数数组，然后进行绝对值计算形成一个数组，可以减少比较次数？</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给你一个整数数组 arr 和一个整数 k 。&lt;/p&gt;
&lt;p&gt;设 m 为数组的中位数，只要满足下述两个前提之一，就可以判定 arr[i] 的值比 arr[j] 的值更强：&lt;/p&gt;
&lt;p&gt; |arr[i] - m| &amp;gt; |arr[j] - m|&lt;br&gt; |arr[i] -
      
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.wusirun.info/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://blog.wusirun.info/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_255_队列实现栈</title>
    <link href="http://blog.wusirun.info/2020/06/20/leetcode-255-%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
    <id>http://blog.wusirun.info/2020/06/20/leetcode-255-%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/</id>
    <published>2020-06-20T14:15:22.000Z</published>
    <updated>2020-06-20T14:32:33.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-255题"><a href="#LeetCode-255题" class="headerlink" title="LeetCode.255题"></a>LeetCode.255题</h2><h3 id="用队列实现栈"><a href="#用队列实现栈" class="headerlink" title="用队列实现栈"></a>用队列实现栈</h3><hr><ol><li>思考队列先进先出，栈先进后出</li><li>就肯定需要用多个队列模拟</li><li>两种实现方式：<ol><li>实现方式一 push时操作差不多，在pop时增加逻辑。从队1中持续push元素，如果pop时，将队1元素push到队2，直到队1最后一个元素，将队1模拟出栈，然后将队1队2交换或者复制。</li><li>实现方式二 从入栈开始增加逻辑。从队1中push元素，队2出栈元素，如果队2中没有元素将队1刚push的元素加入。如果有元素，将队2的元素依次出队加入到队1中，队1队2交换或者复制。出栈模拟时从队2出队。</li></ol></li><li>扩展思考？ 用栈模拟队列操作</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;LeetCode-255题&quot;&gt;&lt;a href=&quot;#LeetCode-255题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode.255题&quot;&gt;&lt;/a&gt;LeetCode.255题&lt;/h2&gt;&lt;h3 id=&quot;用队列实现栈&quot;&gt;&lt;a href=&quot;#用队列
      
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.wusirun.info/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://blog.wusirun.info/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>2020工作学习计划</title>
    <link href="http://blog.wusirun.info/2020/05/25/2020%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    <id>http://blog.wusirun.info/2020/05/25/2020%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</id>
    <published>2020-05-25T09:03:19.000Z</published>
    <updated>2020-10-30T03:55:55.367Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Java虚拟机，Jvm基础和调优等等</li><li>Dubbo和Spring Cloud微服务框架</li><li>微服务框架下，分布式锁和分布式事务</li><li>对应使用的中间件，RPC，数据库中间件，消息中间件</li><li>分布式事务2PC、3PC、TCC、最终一致性解决方案原理</li><li>Redis和Zookeeper</li><li>Elasticsreach+logstash+kibana</li><li>数据结构算法、设计模式</li><li>spring底层了解</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Java虚拟机，Jvm基础和调优等等&lt;/li&gt;
&lt;li&gt;Dubbo和Spring Cloud微服务框架&lt;/li&gt;
&lt;li&gt;微服务框架下，分布式锁和分布式事务&lt;/li&gt;
&lt;li&gt;对应使用的中间件，RPC，数据库中间件，消息中间件&lt;/li&gt;
&lt;li&gt;分布式事务2PC
      
    
    </summary>
    
    
      <category term="心路历程" scheme="http://blog.wusirun.info/categories/%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/"/>
    
    
      <category term="学习" scheme="http://blog.wusirun.info/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>2020面试准备</title>
    <link href="http://blog.wusirun.info/2020/05/05/2020%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    <id>http://blog.wusirun.info/2020/05/05/2020%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</id>
    <published>2020-05-05T11:51:18.000Z</published>
    <updated>2020-10-30T03:56:03.556Z</updated>
    
    <content type="html"><![CDATA[<p>01、透彻理解Tomcat原理手写动静态资源的实现<br>02、分享能源领域的分布式监测系统架构<br>03、分布式系统关键技术Rpc框架详解与实现<br>04、自己写一个SpringMVC框架<br>05、使用Jsoup实现网页爬虫功能<br>06、JAVA高级进阶之NIO通信架构原理详解<br>07、高手必过之路透彻理解Spring容器IOC的原理分析<br>08、并发编程之深入业务隔离场景原理详解<br>09、深入浅出Java虚拟机<br>10、源码分析之手写MyBatis<br>11、大型分布式服务治理技术-Dubbo企业级实战<br>12、大流量高并发之限流特技<br>13、深入分析热部署机制的原理实现<br>14、高性能反向代理服务器Nginx-动静分离实战<br>15、架构师必备技能之Spring MVC框架原理解析<br>下面为系统的学习方向<br>01、maven的使用<br>maven的使用入门<br>maven私服的搭建及部署<br>maven坐标分析/父控设置<br>02、git版本管理及jenkins自动化构建<br>git使用入门培训<br>git常用命令分析和使用<br>jenkins环境搭建及插件配置<br>git+jenkins实现自动化构建<br>03、NoSql专题-redis高性能缓存<br>redis使用入门<br>redis常用命令及客户端的使用<br>redis高可用集群搭建<br>04、NoSql专题-mongodb<br>mongodb使用入门<br>mongodb高可用集群搭建<br>mongodb常用命令及客户端的使用<br>05、分布式专题-zookeeper+dubbo服务协调<br>zookeeper安装部署及命令分析<br>zookeeper客户端的使用<br>zookeeper实现原理分析<br>dubbo的使用入门及配置分析<br>zookeeper+dubbo实现服务注册和发现<br>06、分布式专题-消息中间件<br>activeMq-jms规范及使用<br>activeMq消息分发机制分析<br>kafka实现原理剖析<br>kafka的数据传输事务性及实践练习<br>07、分布式缓存分析对比<br>memcache的原理分析及使用<br>memcache和redis的横向对比分析<br>分布式接口技术<br>webservice/RMI/restful的使用<br>09、高并发专题-数据库层面优化<br>分库分表的原理及规则讲解<br>数据库主备及高可用<br>10、性能调优专题-jvm调优<br>JVM原理剖析<br>jvm内存模型及垃圾回收器的分析<br>11、性能调优专题-容器性能优化<br>nginx性能优化<br>tomcat性能优化<br>12、性能调优专题-数据库优化<br>mysql常见优化手段分析及实践<br>13、高性能容器的使用<br>nginx使用入门<br>nginx负载均衡/反向代理实现<br>14、双十一专题-九阳真经<br>太极聚气之分布式压测平台<br>氤氲紫气之分布式缓存体系<br>盘龙真诀之分布式消息系统<br>金刚之躯之分布式跟踪系统<br>外功辅助之分布式配置系统<br>15、微服务架构技术栈分析<br>springboot的使用<br>16、分布式协调服务zookeeper<br>zookeeper集群及相关概念分析<br>zookeeper java api的使用及实践<br>17、从集中式到分布式架构<br>分布式架构的演进过程<br>分布式架构的基石-TCP/UDP<br>18、分布式通信协议<br>分布式通信协议-HTTP及RESTful<br>分布式通信协议-webservice详解<br>分布式通信协议-RMI<br>分布式通信协议-序列化技术<br>19、分布式服务治理<br>dubbo控制台及监控中心的安装部署<br>dubbo常用配置分析<br>dubbo实战演练<br>20、NIO技术之-Netty<br>NIO基本概念及BIO、AIO的对比分析<br>NIO核心设计思想剖析（Buffer/Channel..）<br>Netty产生的背景及优缺点分析<br>Netty实现IM聊天系统<br>21、分布式缓存技术-Redis<br>redis的安装及数据类型分析<br>Redis客户端的使用<br>Redis高可用方案实战<br>Redis+Lua脚本实现原子操作<br>22、高性能之道-MongoDB<br>MongoDB高可用部署<br>MongoDB动态查询及索引剖析<br>MongoDB集成spring应用<br>23、数据库高性能之道-Mysql<br>分库分表深入分析<br>Mysql主从模型配置/Mycat的使用<br>大家可以点击加入群：650385180<br>24、分布式通信技术<br>JMS基本概念和模型<br>ActiveMQ结合Spring开发<br>ActiveMQ静态网络和**络链接<br>Kafka的高可用方案及原理分析<br>25、SOA架构及微服务架构<br>什么是SOA架构/为什么需要SOA<br>领域驱动设计方法/典型SOA架构设计<br>spring boot深入剖析<br>spring boot+dubbo企业实战<br>26、Docker虚拟化技术<br>Docker虚拟化技术(镜像/仓库/容器)<br>Docker整合spring boot<br>Docker 服务编排<br>27、导流技术<br>Nginx反向代理、负载均衡<br>Nginx进程模型分析<br>Nginx+keepalived高可用方案<br>28、微服务技术<br>spring boot（mvc）<br>spring boot（REST）<br>spring boot(验证）<br>29、spring cloud<br>spring cloud config client<br>spring cloud config server<br>spring cloud netflix eureka<br>spring cloud netflix ribbon<br>spring cloud hystrix<br>spring cloud feign<br>spring cloud stream<br>spring cloud bus<br>spring cloud sleuth<br>30、分布式消息技术-kafka<br>kafka高可用集群及介绍<br>kafka底层实现原理分析<br>31、分布式缓存-redis<br>redis的数据类型分析<br>redis高可用集群方案<br>lua脚本在redis中的应用<br>32、高性能之道-MongoDB<br>MongoDB的基本原理<br>MongoDB常用命令及客户端使用<br>手写基于MongoDB的ORM框架<br>MongoDB高可用解决方案<br>33、数据库高性能-Mysql<br>分库分表深入分析及主从模型<br>数据库中间件Mycat介绍<br>34、性能优化专题<br>从测试的角度解读如何衡量性能<br>了解Linux系统<br>35、虚拟机-JVM<br>内存模型、运行时数据<br>垃圾回收、GC日志<br>调优实战<br>36、容器优化-Tomcat<br>tomcat架构分析<br>线程模型分析<br>tomcat调优实战<br>37、mysql数据库调优<br>Mysql底层存储分析</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;01、透彻理解Tomcat原理手写动静态资源的实现&lt;br&gt;02、分享能源领域的分布式监测系统架构&lt;br&gt;03、分布式系统关键技术Rpc框架详解与实现&lt;br&gt;04、自己写一个SpringMVC框架&lt;br&gt;05、使用Jsoup实现网页爬虫功能&lt;br&gt;06、JAVA高级进阶之NI
      
    
    </summary>
    
    
      <category term="心路历程" scheme="http://blog.wusirun.info/categories/%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/"/>
    
    
      <category term="面试" scheme="http://blog.wusirun.info/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>目标计划</title>
    <link href="http://blog.wusirun.info/2020/04/28/%E7%9B%AE%E6%A0%87%E8%AE%A1%E5%88%92/"/>
    <id>http://blog.wusirun.info/2020/04/28/%E7%9B%AE%E6%A0%87%E8%AE%A1%E5%88%92/</id>
    <published>2020-04-28T03:45:45.000Z</published>
    <updated>2020-10-29T09:54:50.237Z</updated>
    
    <content type="html"><![CDATA[<h5 id="人生目标-2020"><a href="#人生目标-2020" class="headerlink" title="人生目标 -2020"></a>人生目标 -2020</h5><ol><li>健身，俄挺为目标</li><li>赚钱，财务自由</li><li>给自己纹身</li><li>全世界旅行</li><li>阅读，一年读书30+</li><li>留长发，至少到肩</li><li>坚持学习编程，即使工资得不到满足</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;人生目标-2020&quot;&gt;&lt;a href=&quot;#人生目标-2020&quot; class=&quot;headerlink&quot; title=&quot;人生目标 -2020&quot;&gt;&lt;/a&gt;人生目标 -2020&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;健身，俄挺为目标&lt;/li&gt;
&lt;li&gt;赚钱，财务自由&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="人生目标" scheme="http://blog.wusirun.info/categories/%E4%BA%BA%E7%94%9F%E7%9B%AE%E6%A0%87/"/>
    
    
      <category term="目标计划" scheme="http://blog.wusirun.info/tags/%E7%9B%AE%E6%A0%87%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>2020年读书笔记</title>
    <link href="http://blog.wusirun.info/2020/02/05/2020%E5%B9%B4%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.wusirun.info/2020/02/05/2020%E5%B9%B4%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-02-05T02:17:27.000Z</published>
    <updated>2020-07-19T01:48:02.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2020年-读书笔记"><a href="#2020年-读书笔记" class="headerlink" title="2020年 读书笔记"></a>2020年 读书笔记</h2><h4 id="《漫画算法》-2020-05-10"><a href="#《漫画算法》-2020-05-10" class="headerlink" title="《漫画算法》 2020-05-10"></a>《漫画算法》 2020-05-10</h4><ol><li>时间复杂度与空间复杂度分析</li><li>逻辑结构和物理结构</li><li>基本逻辑结构：数组、链表、栈、队列、哈希表（散列表）、树、二叉树（二叉排序树、二叉平衡树、多叉树、B树、B+树、B*树）、图</li><li>基础算法<ol><li>排序算法：</li><li>查找算法：</li><li>其他有意思的算法：</li></ol></li><li><h4 id="《高可用可伸缩为服务架构》"><a href="#《高可用可伸缩为服务架构》" class="headerlink" title="《高可用可伸缩为服务架构》"></a>《高可用可伸缩为服务架构》</h4></li><li>什么是微服务架构？</li><li>微服务架构体系的优缺点：</li><li>什么是驱动领域设计？</li><li>如何去做驱动领域设计？</li><li>Dubbo框架</li><li>Spring Cloud 框架体系</li></ol><h4 id="《深入理解Java虚拟机》"><a href="#《深入理解Java虚拟机》" class="headerlink" title="《深入理解Java虚拟机》"></a>《深入理解Java虚拟机》</h4><ol><li>GC垃圾回收机制和过程</li></ol><h4 id="《剑指offer》"><a href="#《剑指offer》" class="headerlink" title="《剑指offer》"></a>《剑指offer》</h4><h4 id="《离散数学及应用》"><a href="#《离散数学及应用》" class="headerlink" title="《离散数学及应用》"></a>《离散数学及应用》</h4><h4 id="《逆商》"><a href="#《逆商》" class="headerlink" title="《逆商》"></a>《逆商》</h4><h4 id="《消息中间件》1"><a href="#《消息中间件》1" class="headerlink" title="《消息中间件》1"></a>《消息中间件》1</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2020年-读书笔记&quot;&gt;&lt;a href=&quot;#2020年-读书笔记&quot; class=&quot;headerlink&quot; title=&quot;2020年 读书笔记&quot;&gt;&lt;/a&gt;2020年 读书笔记&lt;/h2&gt;&lt;h4 id=&quot;《漫画算法》-2020-05-10&quot;&gt;&lt;a href=&quot;#《漫画算
      
    
    </summary>
    
    
      <category term="心路历程" scheme="http://blog.wusirun.info/categories/%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/"/>
    
    
      <category term="读书" scheme="http://blog.wusirun.info/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>2019年读书笔记</title>
    <link href="http://blog.wusirun.info/2019/09/20/2019%E5%B9%B4%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.wusirun.info/2019/09/20/2019%E5%B9%B4%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2019-09-20T05:54:20.000Z</published>
    <updated>2020-02-05T02:15:30.749Z</updated>
    
    <content type="html"><![CDATA[<h4 id="《未来简史》"><a href="#《未来简史》" class="headerlink" title="《未来简史》"></a>《未来简史》</h4><h4 id="《断舍离》-nbsp-nbsp-2019更早"><a href="#《断舍离》-nbsp-nbsp-2019更早" class="headerlink" title="《断舍离》&nbsp;&nbsp;2019更早"></a>《断舍离》&nbsp;&nbsp;2019更早</h4><h4 id="《人类简史》-nbsp-nbsp-2019-09-23"><a href="#《人类简史》-nbsp-nbsp-2019-09-23" class="headerlink" title="《人类简史》&nbsp;&nbsp;2019-09-23"></a>《人类简史》&nbsp;&nbsp;2019-09-23</h4><h4 id="《未来简史》-1"><a href="#《未来简史》-1" class="headerlink" title="《未来简史》"></a>《未来简史》</h4><h4 id="《大话数据结构》"><a href="#《大话数据结构》" class="headerlink" title="《大话数据结构》"></a>《大话数据结构》</h4><h4 id="《可复制的领导力》"><a href="#《可复制的领导力》" class="headerlink" title="《可复制的领导力》"></a>《可复制的领导力》</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;《未来简史》&quot;&gt;&lt;a href=&quot;#《未来简史》&quot; class=&quot;headerlink&quot; title=&quot;《未来简史》&quot;&gt;&lt;/a&gt;《未来简史》&lt;/h4&gt;&lt;h4 id=&quot;《断舍离》-nbsp-nbsp-2019更早&quot;&gt;&lt;a href=&quot;#《断舍离》-nbsp-nbsp
      
    
    </summary>
    
    
      <category term="心路历程" scheme="http://blog.wusirun.info/categories/%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/"/>
    
    
      <category term="读书" scheme="http://blog.wusirun.info/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>开篇-我的个人博客开张了!</title>
    <link href="http://blog.wusirun.info/2019/09/18/%E5%BC%80%E7%AF%87/"/>
    <id>http://blog.wusirun.info/2019/09/18/%E5%BC%80%E7%AF%87/</id>
    <published>2019-09-18T08:30:11.000Z</published>
    <updated>2020-01-10T09:26:21.188Z</updated>
    
    <content type="html"><![CDATA[<h3 id="想写点东西"><a href="#想写点东西" class="headerlink" title="想写点东西"></a>想写点东西</h3><p>&nbsp;&nbsp;从参加工作,到后来加入博客园这么多年的时间其实一直就想将自己经历和所学慢慢整理记录下来.做成自己的博客查阅,但是一直也没能有动力去实现它.<br>&nbsp;&nbsp;到现在来说博客已经见怪不怪了,方便快捷,而且也越来越多元化.身为一个从业这么多年的码农,此时更想把自己所学慢慢整理记录起来.<br>这也就是说~我的博客开张啦~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;想写点东西&quot;&gt;&lt;a href=&quot;#想写点东西&quot; class=&quot;headerlink&quot; title=&quot;想写点东西&quot;&gt;&lt;/a&gt;想写点东西&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;从参加工作,到后来加入博客园这么多年的时间其实一直就想将自己经历和所学慢慢整理记录下来.做成
      
    
    </summary>
    
    
      <category term="心路历程" scheme="http://blog.wusirun.info/categories/%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/"/>
    
    
      <category term="其他" scheme="http://blog.wusirun.info/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
